#ifndef LIFETIME_LOGIC_GH
#define LIFETIME_LOGIC_GH

#include "nonatomic_inv.gh"

abstract_type lifetime_t; // Type of lifetimes

fixpoint bool lifetime_inclusion(lifetime_t k, lifetime_t k1);

predicate lifetime_token(lifetime_t k;); // Lifetime token

// Full borrow
predicate full_borrow(lifetime_t k, predicate() P);

predicate close_full_borrow_token(predicate() P, real q, lifetime_t k); // accessor's closing inheritance

// LftL-Bor-Acc
lemma void open_full_borrow(lifetime_t k, predicate() P);
    requires full_borrow(k, P) &*& [?q]lifetime_token(k);
    ensures P() &*& close_full_borrow_token(P, q, k);

lemma void close_full_borrow();
    requires close_full_borrow_token(?P, ?q, ?k) &*& P();
    ensures full_borrow(k, P) &*& [q]lifetime_token(k);

typedef lemma void implies(predicate() P, predicate() P1)();
    requires P();
    ensures P1();

// Raw borrows and consequently full borrows are closed under equivalence
lemma void full_borrow_implies(lifetime_t k, predicate() P, predicate() P1);
    requires full_borrow(k, P) &*& is_implies(?f, P, P1) &*& is_implies(?f1, P1, P);
    ensures full_borrow(k, P1) &*& is_implies(f, P, P1) &*& is_implies(f1, P1, P);

// Non-atomic persistent borrow
predicate nonatomic_borrow(lifetime_t k, thread_local_namespace_t tlns, predicate() P);

// LftL-Bor-Na
lemma void full_borrow_into_nonatomic_borrow(lifetime_t k, thread_local_namespace_t tlns, predicate() P);
    requires full_borrow(k, P);
    ensures [_]nonatomic_borrow(k, tlns, P);

// LftL-Na-Shorten
lemma void nonatomic_borrow_mono(lifetime_t k, lifetime_t k1, thread_local_namespace_t tlns, predicate() P);
    requires [_]nonatomic_borrow(k, tlns, P) &*& lifetime_inclusion(k1, k) == true;
    ensures [_]nonatomic_borrow(k1, tlns, P);

predicate close_nonatomic_borrow_token(predicate() P, real q, lifetime_t k, thread_local_namespace_t tlns); // inheritance of the accessor

// LftL-Na-Acc
lemma void open_nonatomic_borrow(lifetime_t k, thread_local_namespace_t tlns, real q);
    requires [_]nonatomic_borrow(k, tlns, ?P) &*& tlns == Tlns(?tid, Nshr, ?ls) &*& [q]lifetime_token(k) &*& nonatomic_inv_token(tid, Nshr, ls);
    ensures P() &*& close_nonatomic_borrow_token(P, q, k, tlns);

lemma void close_nonatomic_borrow();
    requires close_nonatomic_borrow_token(?P, ?q, ?k, Tlns(?tid, Nshr, ?ls)) &*& P();
    ensures [q]lifetime_token(k) &*& nonatomic_inv_token(tid, Nshr, ls);
#endif