fn output_i8(v: i8) {}
fn output_i16(v: i16) {}
fn output_i32(v: i32) {}
fn output_i64(v: i64) {}
fn output_i128(v: i128) {}

fn output_u8(v: u8) {}
fn output_u16(v: u16) {}
fn output_u32(v: u32) {}
fn output_u64(v: u64) {}
fn output_u128(v: u128) {}

fn test_negative_scalars() {
    unsafe {
        let vi8: i8 = -42;
        //@ assert vi8 == -42;
        output_i8(vi8);
        let vi16: i16 = -10000;
        //@ assert vi16 == -10000;
        output_i16(vi16);
        let vi32: i32 = -1_000_000_000;
        //@ assert vi32 == -1000000000;
        output_i32(vi32);
        let vi64_1: i64 = -1_000_000_000_000_000_000;
        //@ assert vi64_1 == -1000000000000000000;
        output_i64(vi64_1);
        let vi64_2: i64 = -2305843009213693952;
        //@ assert vi64_2 == -2305843009213693952;
        output_i64(vi64_2);
        let vi64_3: i64 = -9223372036854775808;
        //@ assert vi64_3 == -9223372036854775808;
        output_i64(vi64_3);
        let vi64_4: i64 = -9223372036854775807;
        //@ assert vi64_4 == -9223372036854775807;
        output_i64(vi64_4);
        let vi128_1: i128 = -1_000_000_000_000_000_000_000_000_000_000_000_000i128;
        //@ assert vi128_1 == -1000000000000000000000000000000000000;
        output_i128(vi128_1);
        let vi128_2: i128 = -36893488147419103231i128;
        //@ assert vi128_2 == -36893488147419103231;
        output_i128(vi128_2);
        let vi128_3: i128 = -36893488147419103230i128;
        //@ assert vi128_3 == -36893488147419103230;
        output_i128(vi128_3);
        let vi128_4: i128 = -170141183460469231731687303715884105728i128;
        //@ assert vi128_4 == -170141183460469231731687303715884105728;
        output_i128(vi128_4);
    }
}

fn main() {
    unsafe {
        let vi8: i8 = 42;
        //@ assert vi8 == 42;
        output_i8(vi8);
        let vi16: i16 = 10000;
        //@ assert vi16 == 10000;
        output_i16(vi16);
        let vi32: i32 = 1_000_000_000;
        //@ assert vi32 == 1000000000;
        output_i32(vi32);
        let vi64_1: i64 = 1_000_000_000_000_000_000;
        //@ assert vi64_1 == 1000000000000000000;
        output_i64(vi64_1);
        let vi64_2: i64 = 2305843009213693952;
        //@ assert vi64_2 == 2305843009213693952;
        output_i64(vi64_2);
        let vi64_3: i64 = 4611686018427387904;
        //@ assert vi64_3 == 4611686018427387904;
        output_i64(vi64_3);
        let vi64_4: i64 = 9223372036854775807;
        //@ assert vi64_4 == 9223372036854775807;
        output_i64(vi64_4);
        let vi128_1: i128 = 1_000_000_000_000_000_000_000_000_000_000_000_000i128;
        //@ assert vi128_1 == 1000000000000000000000000000000000000;
        output_i128(vi128_1);
        let vi128_2: i128 = 36893488147419103231i128;
        //@ assert vi128_2 == 36893488147419103231;
        output_i128(vi128_2);
        let vi128_3: i128 = 36893488147419103230i128;
        //@ assert vi128_3 == 36893488147419103230;
        output_i128(vi128_3);
        let vi128_4: i128 = 170141183460469231731687303715884105727i128;
        //@ assert vi128_4 == 170141183460469231731687303715884105727;
        output_i128(vi128_4);
    }

    unsafe {
        let vu8: u8 = 42;
        //@ assert vu8 == 42;
        output_u8(vu8);
        let vu16: u16 = 10000;
        //@ assert vu16 == 10000;
        output_u16(vu16);
        let vu32: u32 = 1_000_000_000;
        //@ assert vu32 == 1000000000;
        output_u32(vu32);
        let vu64_1: u64 = 1_000_000_000_000_000_000;
        //@ assert vu64_1 == 1000000000000000000;
        output_u64(vu64_1);
        let vu64_2: u64 = 18446744073709551615;
        //@ assert vu64_2 == 18446744073709551615;
        output_u64(vu64_2);
        let vu64_3: u64 = 9223372036854775808;
        //@ assert vu64_3 == 9223372036854775808;
        output_u64(vu64_3);
        let vu64_4: u64 = 9223372036854775809;
        //@ assert vu64_4 == 9223372036854775809;
        output_u64(vu64_4);
        let vu128_1: u128 = 1_000_000_000_000_000_000_000_000_000_000_000_000u128;
        //@ assert vu128_1 == 1000000000000000000000000000000000000;
        output_u128(vu128_1);
        let vu128_2: u128 = 36893488147419103231u128;
        //@ assert vu128_2 == 36893488147419103231;
        output_u128(vu128_2);
        let vu128_3: u128 = 36893488147419103230u128;
        //@ assert vu128_3 == 36893488147419103230;
        output_u128(vu128_3);
        let vu128_4: u128 = 340282366920938463463374607431768211455u128;
        //@ assert vu128_4 == 340282366920938463463374607431768211455;
        output_u128(vu128_4);
    }
}
