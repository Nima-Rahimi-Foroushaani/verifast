fn output_u8(v: u8) {}
fn output_u16(v: u16) {}
fn output_u32(v: u32) {}
fn output_u64(v: u64) {}
fn output_u128(v: u128) {}

fn main() {
    unsafe {
        let vu8: u8 = 42;
        //@ assert vu8 == 42;
        output_u8(vu8);
        let vu16: u16 = 10000;
        //@ assert vu16 == 10000;
        output_u16(vu16);
        let vu32: u32 = 1_000_000_000;
        //@ assert vu32 == 1000000000;
        output_u32(vu32);
        let vu64_1: u64 = 1_000_000_000_000_000_000;
        //@ assert vu64_1 == 1000000000000000000;
        output_u64(vu64_1);
        let vu64_2: u64 = 18446744073709551615;
        //@ assert vu64_2 == 18446744073709551615;
        output_u64(vu64_2);
        let vu64_3: u64 = 9223372036854775808;
        //@ assert vu64_3 == 9223372036854775808;
        output_u64(vu64_3);
        let vu64_4: u64 = 9223372036854775809;
        //@ assert vu64_4 == 9223372036854775809;
        output_u64(vu64_4);
        let vu128_1: u128 = 1_000_000_000_000_000_000_000_000_000_000_000_000u128;
        //@ assert vu128_1 == 1000000000000000000000000000000000000;
        output_u128(vu128_1);
        let vu128_2: u128 = 36893488147419103231u128;
        //@ assert vu128_2 == 36893488147419103231;
        output_u128(vu128_2);
        let vu128_3: u128 = 36893488147419103230u128;
        //@ assert vu128_3 == 36893488147419103230;
        output_u128(vu128_3);
        let vu128_4: u128 = 340282366920938463463374607431768211455u128;
        //@ assert vu128_4 == 340282366920938463463374607431768211455;
        output_u128(vu128_4);
    }
}
